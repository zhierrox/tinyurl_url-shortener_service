nodmon:
	npm view nodemon version
	npm config get prefix
	export PATH=/usr/local/Cellar/node/7.0.0/libexec/npm/bin:$PATH

	mac修改环境变量：：
		vi ~/.bash_profile

		export PATH="/usr/local/Cellar/node/7.0.0/libexec/npm/bin/:${PATH}"

		export PATH=...:/usr/local/Cellar/node/7.0.0/libexec/npm/bin
		
		:w !sudo tee %
			Then type (L)oad at the prompt, to re-load the file after it is saved.

Docker:
	docker build -t zhierrox/tiny .

	docker image

	docker run --name tinyurlservice -p 80:3000 -d zhierrox/tiny

	docker run --name tinyurlservice -p 80:3000 --env ROOT_URL=http://192.168.1.8 -d zhierrox/tiny

	docker rm -f 98a87bc76718[docker container id; 删除docker container, 但image还在]

	http://192.168.1.8:80

Docker compose::
	写docker-compose.yml, 且yml不能用/t，只能用空格
	简化了：：docker  build, docker run link

	docker-compose up --build

Redis::连接docker的redis container
	var host = process.env.REDIS_PORT_6379_TCP_ADDR;
	var port = process.env.REDIS_PORT_6379_TCP_PORT;

	var redisClient = redis.createClient(port, host);

	redisClient.subscribe/redisClient.unsubscribe/redisClient.on

	所有pub/sub很有用，但是redis的实现有这么几个问题： 
		1，如果一个客户端订阅了频道，但自己读取消息的速度却不够快的话，那么不断积压的消息会使redis输出缓冲区的体积变得越来越大，这可能使得redis本身的速度变慢，甚至直接崩溃.
		2，这和数据传输可靠性有关，如果在订阅方断线，那么他将会丢失所有在短线期间发布者发布的消息.

Apache Benchmark：：AB Test
	ab -n 10000 -c 50 http://127.0.0.1/#/urls/A

	-n：：总请求数
	-c：：同时发送请求数
	最后参数：：要测试的页面,不支持localhost, 需要使用ip

	Apache JMeter更专业

AngularJS：：
	ng-href自动抹去http

	给shortUrl自动加上ip

Nginx::
		//Nginx担当WebSockets代理, 为了让Nginx可以将来自客户端的Upgrade请求发送到后端服务器，
		//Upgrade和Connection的头信息必须被显式的设置
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
		proxy_http_version 1.1;

		//传递client的ip, host给server；$proxy_add_x_forwarded_for包含客户端ip；
	    //X-Forwarded-For是Nginx的ip
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Host $host;

		//Nginx分发请求给server
		proxy_pass http://app;

User Management Map::
	urlService::
		in redis::
			Map1 = {"username: longUrl" : shortUrl}
			Map2 = {shortUrl: longUrl}
		in mongo::
			Schema = {shortUrl, longUrl, username, creationTime}







